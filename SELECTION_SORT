/*
    Método de Ordenação de Dados - Selection Sort
*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define TAM 50 // Definição do tamanho do vetor

void fSelect_Sort(int *pVetor); // Declaração da função

int main()
{
    int vVetor[TAM]; // Declarando o vetor 
    int vAux; // Declarando uma variavel

    srand ( time(NULL) ); // função para gerar números aleatóriamente
    for (vAux=0; vAux < TAM; vAux++)  // Estrutura de repetição para percorrer o vetor
    {
        vVetor[vAux] = (rand() % 89) + 10; // Estrutura para preencher o vetor de formar aleatória
        printf(" %d,",vVetor[vAux]); // Imprimir os números gerados na tela
    }

    fSelect_Sort(vVetor); // Chama a função de ordenação
    printf("\n\n");

    for (vAux=0; vAux < TAM; vAux++)  // Percorre o vetor
    {
        printf(" %d,",vVetor[vAux]); // Impri os valores de todas as posições
    }

    printf("\n\n ");
    system("pause");
    return 0;
}

void fSelect_Sort(int *pVetor) // Decleração da função
{
    //Decleração das variaveis
    int vMenor;
    int vAux;
    int vTemp;
    int vTroca;

    for(vAux=0; vAux < TAM-1; vAux++) // Percorre todo vetor menos a ultima posição pois já está ordenada.
    {
        vMenor = vAux; // A variavel vMenor está recebendo o menor valor 

        for (vTemp=vAux+1; vTemp < TAM; vTemp++) // Percorre o vetor da posição da variavel vAux até o final do vetor ;
        {
            if (pVetor[vTemp] < pVetor[vMenor]) // Testa se a posição que está passando é menor que o menor valor;
            {
                vMenor = vTemp; // vMenor recebe a posição do menor valor;
            }
        }

        if (vMenor != vAux) // Se a posição não for igual a do que está percorrenco ocorre a troca para ficar com os números ordenados.
        {
            vTroca         = pVetor[vAux];
            pVetor[vAux]   = pVetor[vMenor];
            pVetor[vMenor] = vTroca;
        }
    }
}